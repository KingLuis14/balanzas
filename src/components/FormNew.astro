---

---

<form class="form" novalidate>
  <div class="form__group" data-group="name">
    <label for="name">Nombre Completo:</label>
    <input
      id="name"
      required
      type="text"
      name="name"
      placeholder="Mario lopez"
    />
    <small id="error-name" class="form__error"></small>
  </div>
  <div class="form__group" data-group="numero">
    <label for="numero">NÃºmero:</label>
    <input
      id="numero"
      required
      type="tel"
      name="numero"
      placeholder="989 945 647"
    />
    <small id="error-numero" class="form__error"></small>
  </div>
  <div class="form__group" data-group="email">
    <label for="email">E-mail:</label>
    <input
      id="email"
      required
      type="email"
      name="email"
      placeholder="correo@gmail.com"
    />
    <small id="error-mail" class="form__error"></small>
  </div>

  <div class="form__group" data-group="mensaje">
    <label for="mensaje">Mensaje:</label>
    <textarea id="mensaje" name="mensaje" placeholder="Escribe tu mensaje"
    ></textarea>
  </div>

  <input
    type="submit"
    id="send-button"
    class="button button--primary"
    value="Enviar"
  />

  <div class="form__send">
    <h2 class="fs-super-title-2">Datos enviados correctamente</h2>
  </div>
</form>

<style lang="scss">
  .form {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
    background-color: white;

    &__group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;

      > input,
      textarea,
      select {
        align-self: stretch;
        padding: 1em 0.75em;
        border: 1.5px solid rgb(214, 214, 214);
      }

      > textarea {
        min-height: 150px;
      }

      input:-webkit-autofill {
        box-shadow: 0 0 0 1000px rgb(253, 253, 253) inset;
      }

      &[data-error] {
        > input,
        select {
          border-color: crimson;
          background-color: rgb(255, 225, 232) !important;
        }

        input:-webkit-autofill {
          box-shadow: 0 0 0 1000px rgb(255, 225, 232) inset;
        }
      }
    }

    &__error {
      color: crimson;
      margin-top: -0.5rem;
    }

    &__send {
      background-color: rgb(0, 0, 0);
      color: white;
      position: fixed;
      inset: 0;
      display: grid;
      place-items: center;
      opacity: 0;
      pointer-events: none;

      &.animation {
        animation: send 4.5s;
        pointer-events: auto;
      }

      @keyframes send {
        50% {
          opacity: 0.75;
        }
        100% {
          opacity: 0;
        }
      }

      > h2 {
        width: min(20ch, 100%);
        text-align: center;
      }
    }
  }
</style>

<script>
  import CanvaConfetti from "canvas-confetti";
  import { baseSchema, schemaWithCurso } from "@/utils/ValidationForm.ts";
  import { EMAIL } from "@/constants.ts";

  document.addEventListener("astro:page-load", () => {
    const $Formulario = document.querySelector<HTMLFormElement>(".form");

    $Formulario?.addEventListener("submit", async (event) => {
      event.preventDefault();
      const $currentForm = event.target as HTMLFormElement;
      const formData = new FormData($currentForm);
      const formValues = Object.fromEntries(formData);

      cleanForm($currentForm);

      const currenSchema = baseSchema;

      // Validar el formulario usando Zod
      const validationResult = currenSchema.safeParse(formValues);

      if (!validationResult.success) {
        const errors = validationResult.error.format();

        const filteredKeys = Object.keys(errors).filter(
          (key) => key !== "_errors"
        );

        filteredKeys.forEach((key) => {
          const fieldErrors: string = errors[key]?._errors[0];

          const $InputError = $currentForm.querySelector(
            `.form__group[data-group="${key}"]`
          ) as HTMLInputElement;

          $InputError.setAttribute("data-error", "");
          const errorMessage = $InputError.querySelector(".form__error");
          if (errorMessage) {
            errorMessage.textContent = fieldErrors;
          }
        });
      } else {
        const $BtnLoading = $currentForm.querySelector(
          "#send-button"
        ) as HTMLInputElement;
        $BtnLoading.value = "Enviando ...";
        $BtnLoading.classList.add("button--loading");

        await new Promise<void>((resolve) =>
          setTimeout(() => {
            $BtnLoading.value = "Enviar";
            $BtnLoading.classList.remove("button--loading");
            const $SendSucces = $currentForm.querySelector(
              ".form__send"
            ) as HTMLElement;

            $SendSucces.classList.add("animation");

            for (let i = 0; i < 2; i++) {
              setTimeout(() => {
                CanvaConfetti({
                  particleCount: 100,
                  startVelocity: 45,
                  decay: 0.9,
                  gravity: 1,
                  spread: 75,
                  origin: {
                    x: Math.random(),
                    y: 0.5 + Math.random() * 0.5,
                  },
                });
              }, i * 1000);
            }

            $SendSucces.addEventListener("animationend", () => {
              $SendSucces.classList.remove("animation");
              resolve();
            });
          }, 3000)
        );

        try {
          const response = await fetch(`https://formsubmit.co/ajax/${EMAIL}`, {
            method: "POST",
            body: new FormData($currentForm),
          });

          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();
          console.log(data);
        } catch (error) {}
      }
    });

    document.getElementById("numero")?.addEventListener("input", function (e) {
      const $Element = e.target as HTMLInputElement;
      let value = $Element.value.replace(/\D/g, "");
      let formattedValue = value.match(/.{1,3}/g)?.join(" ") || value;

      $Element.value = formattedValue;
    });

    const cleanForm = ($currentForm: HTMLFormElement) => {
      const $InputErrors = [
        ...$currentForm.querySelectorAll(".form__group[data-error]"),
      ] as HTMLElement[];

      if ($InputErrors.length > 0) {
        $InputErrors.forEach((field) => {
          field.removeAttribute("data-error");
          const errorMessage = field.querySelector(".form__error");
          if (errorMessage) {
            errorMessage.textContent = "";
          }
        });
      }
    };
  });
</script>
