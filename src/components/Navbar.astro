---
import LayoutWrapper from "@/components/LayoutWrapper.astro";
import DataMenu from "@/data/Menu.json";
import { Icon } from "astro-icon/components";
---

<header id="Header-Main">
    <LayoutWrapper classBlock="header-wrapper" data-overlay="false"
    id="Navbar-Overlay">
        <span>
            <Icon name="Dev" size={50} />
        </span>
        <nav class="navbar navbar--theme-first" id="Navbar-main">
            <ul class="navbar__list">
                {
                    DataMenu.map(({ item, url, child }) => (
                        <li class="navbar__item">
                            <span class:list={[{'navbar__group-link': child.length > 0}]}>
                                <a
                                    class:list={[
                                        "navbar__link",
                                        {
                                            "navbar__link--action":
                                                child.length > 0,
                                        },
                                    ]}
                                    {...(url && { href: url })}
                                >
                                    {item}
                                </a>
                                {child && child.length > 0 && (
                                    <span class="navbar__icon-wrapper">
                                        <Icon
                                            name="ArrowIcon"
                                            class="navbar__icon"
                                        ></Icon>
                                    </span>
                                )}
                            </span>
                            {child && child.length > 0 && (
                                <div
                                    class="navbar__sub-navbar-wrapper"
                                    
                                >
                                    <ul class="navbar__sub-navbar">
                                        {child.map(({ item, url }) => (
                                            <li class="navbar__item">
                                                <a
                                                    class="navbar__link navbar__link--sub-navbar fs-small"
                                                    {...(url && { href: url })}
                                                >
                                                    {item}
                                                </a>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                        </li>
                    ))
                }
            </ul>
            <button class="btn-Close" id="btn-Close">
                <Icon name="BtnClose" size={18} />
            </button>
        </nav>
        <button class="btn-Toogle" id="btn-Toogle" aria-controls="Navbar-main">
            <Icon name="BtnToogle" size={18} />
        </button>
    </LayoutWrapper>
</header>

<style lang="scss">
    @use "../scss/components/" as *;
    @use "../scss/settings/" as *;

    header {
        position: fixed;
        top: 0;
        display: grid;
        align-content: center;
        padding-block: 8px;
        z-index: 1000;
        width: 100%;
        height: var(--alto-header);
        transition: background-color 0.5s;
    }

    .header-wrapper {
        display: flex;
        justify-content: space-between;

        &[data-overlay="true"]::before {
            content: "";
            position: fixed;
            height: 100vh;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.282);

            @include media-Query(desktop) {
                content: none;
            }
        }
    }

    .btn-Toogle {
        display: flex;
        padding: 7px;
        align-self: center;
        border: none;
        cursor: pointer;
        background-color: white;
        border-radius: 50%;
        font-size: 1.5rem;
        color: #0f1526;

        > svg {
            pointer-events: none;
        }

        @include media-Query(desktop) {
            display: none;
        }
    }


    .btn-Close {
        background-color: rgb(239, 239, 239);
        color: #0f1526;
        border-radius: 50%;
        position: absolute;
        top: 5px;
        right: 10px;
        padding: 10px;
        border: none;
        display: flex;
        cursor: pointer;
        font-size: 1.5rem;
        

        > svg {
            pointer-events: none;
        }

        @include media-Query(desktop) {
            display: none;
        }
    }

</style>

<script>
import { defaults } from "autoprefixer";


    const $HeaderMain = document.getElementById("Header-Main");
    const $NavbarMain = document.getElementById("Navbar-main");
    const $NavbarOverlay = document.getElementById("Navbar-Overlay");
    const isDesktop = window.matchMedia('(mix-width: 1024px)').matches;

    

    $HeaderMain?.addEventListener("click", (e) => {
        const $Element = e.target as HTMLElement;

        if ($Element.classList.contains("btn-Close")) {
            $NavbarMain.setAttribute("aria-expanded", "false");
            $NavbarOverlay.setAttribute("data-overlay", "false");
        }

        if ($Element.classList.contains("btn-Toogle")) {
            $NavbarMain.setAttribute("aria-expanded", "true");
            $NavbarOverlay.setAttribute("data-overlay", "true");

        }

        

        if ($Element.classList.contains("navbar__group-link")) {
            const $subNavbarWrapper = $Element.nextElementSibling;
            const $Icon = $Element.querySelector(".navbar__icon");
            const $IconActive = $NavbarMain.querySelector(".navbar__icon[data-rotate]");
            const $subNavbarListActive = $NavbarMain.querySelector(".navbar__sub-navbar.active" );
            const $subNavbarList = $subNavbarWrapper.querySelector(".navbar__sub-navbar");

            $subNavbarWrapper.toggleAttribute("aria-expanded");
            $Icon.toggleAttribute("data-rotate")

                if ($subNavbarList.classList.contains("active")) {

                        $subNavbarList.classList.remove("active");

                } else {
                // Si hay otro submenú activo, quítale la clase 'active'
                
                    if ($subNavbarListActive) {
                        $subNavbarListActive.classList.remove("active");
                        $IconActive.removeAttribute("data-rotate");
                    }
                
                
                $subNavbarList.classList.add("active");
                }
                

           
        }
    });

    

    window.addEventListener("resize", () => {
        if ($NavbarMain.getAttribute("aria-expanded") === "false") {
            $NavbarMain.classList.add("noTransition");
        }
    });

    document.body.addEventListener("mouseover", () => {
        $NavbarMain.classList.remove("noTransition");
    });
</script>
