---
import Navbar from "@/sections/Navbar.astro";
import type { Data } from "@/interface/products";
import MainLayout from "@/layout/MainLayout.astro";
import { wordPressFecth } from "@/utils/WordPressFetch";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  const data: Data = await wordPressFecth({
    query: `
	query NewQuery {
  allProductos {
    nodes {
      productos_balanzas {
        descripcion
        descuento
        id
        oferta
        precio
        imagen {
          srcSet
          mediaItemUrl
          mediaDetails {
            height
            width
          }
        }
        detalles {
          detalle
        }
      }
      slug
    }
  }
}
	`,
  });

  return data.allProductos.nodes.map((d) => ({
    params: {
      producto: d.slug,
    },
    props: d.productos_balanzas,
  }));
}

const { id, descripcion, detalles, imagen, precio, oferta, descuento } =
  Astro.props;

const { width, height } = imagen.mediaDetails;

const { producto: slug } = Astro.params;

const totalDescuento = descuento ? (descuento / 100) * precio : 0;
const totalPrecio = Math.ceil((precio - totalDescuento) * 10) / 10;
const formatPrecio = totalPrecio.toFixed(2);

const SEO_JSON_DL = {
  "@context": "https://schema.org",
  "@type": "Product",
  "name": id,
  "description": descripcion,
  "image": imagen.mediaItemUrl,
  "sku": id,
  "offers": {
    "@type": "Offer",
    "priceCurrency": "PEN",
    "price": formatPrecio,
    "availability": "https://schema.org/InStock",
    "url": `https://ecomerce-balanzas.netlify.app/productos/${slug}`,
    "priceValidUntil": "2024-12-31",
    "discount": oferta ? `${descuento}%` : undefined,
    "originalPrice": oferta ? precio.toFixed(2) : undefined
  },
  "aggregateRating": {
    "@type": "AggregateRating",
    "ratingValue": "5",
    "reviewCount": "150"
  },
  "additionalProperty": {
    "@type": "PropertyValue",
    "name": "Cantidad m√°xima",
    "value": "5"
  }
}






---

<MainLayout title={id} description={descripcion} image={imagen.mediaItemUrl}>

  <Fragment slot="json-dl">
    <script
          type="application/ld+json"
          set:html={JSON.stringify(SEO_JSON_DL)}
        />
  </Fragment>



  <Navbar slot="Navbar" position="sticky" />
  <section class="section-page">
    <div class="wrapper container">
      <div>
        <img
          src={imagen.mediaItemUrl}
          id="imgProduct"
          alt={id}
          transition:name={slug}
          style=`aspect-ratio: ${width}/ ${height};`
        />
      </div>
      <div class="container__content">
        <ul class="container__listStar">
          {
            "12345".split("").map((star) => (
              <li class="container__itemStar">
                <Icon name="star" class="fs-normal" />
              </li>
            ))
          }
        </ul>
        <h1 class="fs-title-3" >{id}</h1>
        <h3 class="container__precio">
          <span class="fs-super-title-2" style="font-weight: 700;" >S/{formatPrecio}</span>
          {
            oferta && (
              <span
                class="fs-normal container__descuento">
                -{descuento}%
              </span>
            )
          }
        </h3>
        <span id="data-precio">Precio normal : <del>S/{precio}</del> </span>
        <p>{descripcion}</p>
        <div class="container__groupButton">
          <button class="button--oneline"   data-decrement>-</button>
          <input
            type="number"
            id="cantidad"
            name="custom-input-number"
            class="fs-normal"
            value="1"
            min="1"
            disabled
          />
         
          <button class="button--primary"   data-increment>+</button>
        </div>
        <button
        class="button button--primary"
          data-slug={slug}
          data-id={id}
          data-precio={precio}
          data-img={imagen.mediaItemUrl}
          data-oferta={oferta}
          data-descuento={descuento}
          data-addToCart>Agregar al carrito</button
        >
        <ul style="padding-inline-start: 1.2em;">
          {detalles.map(({ detalle }) => <li>{detalle}</li>)}
        </ul>
        <input type="hidden" id="product-id" value={id} />
      </div>
    </div>
  </section>
</MainLayout>

<style lang="scss">
  @use "../../scss/settings/" as *;

  .container {
    display: grid;
    // grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: 1.75rem;

    @media (width >= 768px) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    &__content {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    &__precio {
      display: flex;
      align-items: center;
      gap: 1.5rem;
    }

    &__descuento {
      background-color: var(--yellow-green-800);
      padding: 0.2em 0.8em;
      border-radius: 0.25em;
      color: var(--green-800);
      line-height: normal;
    }

    &__groupButton {
      display: flex;
      gap: .5rem;

      > button{
        width: 2rem;
        aspect-ratio: 1;
        border-radius: 50%;
      }

      


      > input {
        outline: 0;
        border: 0;
        background-color: rgb(255, 255, 255);
        width: 4rem;
        text-align: center;
        padding: 0;
        font-weight: 700;
        color: black;
      }

      > input[type="number"]::-webkit-outer-spin-button,
      input[type="number"]::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }

      > input[type="number"] {
        -moz-appearance: textfield; /* Para Firefox */
      }
    }


    &__listStar {
      display: flex;
      align-items: center;
      gap: 0.2rem;
    }

    &__itemStar {
      line-height: normal;
      color: var(--yellow-green-800);
    }


  }
</style>


<script>
  import type { LocalStorageProductsBalanzas } from '@/interface/products';
   import { atomProductsLength } from '@/store/cartStore';
  import { addCustomEventListener } from '@/utils/CustomEventListener';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const productsLocal: LocalStorageProductsBalanzas[] = JSON.parse(
      localStorage.getItem('product') ?? '[]'
    );

    const $InputCantidad =
      document.querySelector<HTMLInputElement>('input#cantidad');
    const $container = document.querySelector(
      '.container__content'
    ) as HTMLElement;
    const $ProductId = document.querySelector<HTMLInputElement>('#product-id');

    if (!$InputCantidad || !$ProductId) return;

    addCustomEventListener(
      'click',
      'button[data-increment]',
      () => {
        const valueInput = Number($InputCantidad.value);
        const cantidad = Math.min(valueInput + 1, 5);
        $InputCantidad.value = cantidad.toString();
      },
      $container
    );

    addCustomEventListener(
      'click',
      'button[data-decrement]',
      e => {
        const valueInput = Number($InputCantidad.value);
        const cantidad = Math.max(valueInput - 1, 1);
        $InputCantidad.value = cantidad.toString();
      },
      $container
    );

    addCustomEventListener(
      'click',
      'button[data-addToCart]',
      e => {
        const $element = e.target as HTMLElement;
        const productId = $ProductId.value;
        const productQuantity = Number($InputCantidad.value);

        const existingProduct = productsLocal.find(pro => pro.id === productId);

        if (existingProduct) {
          existingProduct.cantidad = productQuantity;
        } else {
          productsLocal.push({
            slug: $element.getAttribute('data-slug'),
            id: $element.getAttribute('data-id'),
            cantidad: productQuantity,
            imagen: $element.getAttribute('data-img'),
            precio: Number($element.getAttribute('data-precio')),
            oferta: $element.hasAttribute('data-oferta'),
            descuento: Number($element.getAttribute('data-descuento')),
          });
        }

        atomProductsLength.set(productsLocal.length);

        localStorage.setItem('product', JSON.stringify(productsLocal));

        navigate('/carrito/');
      },
      $container
    );

    const updateCantidad = () => {
      const productId = $ProductId.value;
      const existingProduct = productsLocal.find(pro => pro.id === productId);
      $InputCantidad.value = existingProduct
        ? String(existingProduct.cantidad)
        : '1';
    };

    updateCantidad();
  });
</script>
